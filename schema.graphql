type UniswapFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  "BigDecimal"
  totalVolumeUSD: String!
  "BigDecimal"
  totalVolumeETH: String!

  # untracked values - less confident USD scores
  "BigDecimal"
  untrackedVolumeUSD: String!

  # total liquidity
  "BigDecimal"
  totalLiquidityUSD: String!
  "BigDecimal"
  totalLiquidityETH: String!

  # transactions
  txCount: Int!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: Int!

  # used for other stats like marketcap
  totalSupply: String!

  # token specific volume
  "BigDecimal"
  tradeVolume: String!
  "BigDecimal"
  tradeVolumeUSD: String!
  "BigDecimal"
  untrackedVolumeUSD: String!

  # transactions across all pairs
  txCount: Int!

  # liquidity across all pairs
  "BigDecimal"
  totalLiquidity: String!

  # derived prices
  "BigDecimal"
  derivedETH: String!
}

type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  "BigDecimal"
  reserve0: String!
  "BigDecimal"
  reserve1: String!
  "BigDecimal"
  totalSupply: String!

  # derived liquidity
  "BigDecimal"
  reserveETH: String!
  "BigDecimal"
  reserveUSD: String!
  # used for separating per pair reserves and global
  "BigDecimal"
  trackedReserveETH: String!

  # Price in terms of the asset pair
  "BigDecimal"
  token0Price: String!
  "BigDecimal"
  token1Price: String!

  # lifetime volume stats
  "BigDecimal"
  volumeToken0: String!
  "BigDecimal"
  volumeToken1: String!
  "BigDecimal"
  volumeUSD: String!
  "BigDecimal"
  untrackedVolumeUSD: String!
  txCount: Int!

  # creation stats
  createdAtTimestamp: DateTime!
  createdAtBlockNumber: Int!

  # Fields used to help derived relationship
  liquidityProviderCount: Int! # used to detect new exchanges
  # derived fields
  # pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  # liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  # mints: [Mint!]! @derivedFrom(field: "pair")
  # burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [TokenSwapEvent!]! @derivedFrom(field: "pair")
}

type LiquidityPosition @entity {
  id: ID!
  user: String!
  pair: Pair!
  "BigDecimal"
  liquidityTokenBalance: String!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: Int!
  timestamp: DateTime!

  swaps: [ID!]
}

type TokenSwapEvent @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!

  transaction: Transaction
  timestamp: DateTime! @index
  
  pair: Pair
  pairId: ID

  pool: Pool
  poolId: ID

  buyer: String! @index
  tokenSold: Token!
  soldAmount: BigInt!
  tokenBought: Token!
  boughtAmount: BigInt!

  "BigDecimal"
  amountUSD: String! # derived info
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  "BigDecimal"
  ethPrice: String! # price of ETH usd
}

type Pool @entity {
  id: ID!

  # number of tokens supported
  numTokens: Int!

  # supported tokens
  tokens: [String!]!

  # token balances
  balances: [BigInt!]!

  # liquidity provider token
  lpToken: String!

  # amplification coefficient
  a: BigInt!

  swapFee: BigInt!
  adminFee: BigInt!

  virtualPrice: BigInt!

  # owner address
  owner: String!

  swaps: [TokenSwapEvent!] @derivedFrom(field: "pool")
}