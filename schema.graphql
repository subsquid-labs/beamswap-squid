type UniswapFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  totalVolumeUSD: Float!
  totalVolumeETH: Float!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: Float!

  # total liquidity
  totalLiquidityUSD: Float!
  totalLiquidityETH: Float!

  # transactions
  txCount: Int!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: Int!

  # used for other stats like marketcap
  totalSupply: Float!

  # token specific volume
  tradeVolume: Float!
  tradeVolumeUSD: Float!
  untrackedVolumeUSD: Float!

  # transactions across all pairs
  txCount: Int!

  # liquidity across all pairs
  totalLiquidity: Float!

  # derived prices
  derivedETH: Float!
}

type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: Float!
  reserve1: Float!
  totalSupply: Float!

  # derived liquidity
  reserveETH: Float!
  reserveUSD: Float!
  # used for separating per pair reserves and global
  trackedReserveETH: Float!

  # Price in terms of the asset pair
  token0Price: Float!
  token1Price: Float!

  # lifetime volume stats
  volumeToken0: Float!
  volumeToken1: Float!
  volumeUSD: Float!
  untrackedVolumeUSD: Float!
  txCount: Int!

  # creation stats
  createdAtTimestamp: DateTime!
  createdAtBlockNumber: Int!

  # Fields used to help derived relationship
  liquidityProviderCount: Int! # used to detect new exchanges
  # derived fields
  # pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  # liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  # mints: [Mint!]! @derivedFrom(field: "pair")
  # burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  # usdSwapped: String!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: String!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: Int!
  timestamp: DateTime!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [ID!]!
  burns: [ID!]!
  swaps: [ID!]!
}

# type Mint @entity {
#   # transaction hash + "-" + index in mints Transaction array
#   id: ID!
#   transaction: Transaction!
#   timestamp: DateTime! # need this to pull recent txns for specific token or pair
#   pair: Pair!

#   # populated from the primary Transfer event
#   to: String!
#   liquidity: String!

#   # populated from the Mint event
#   sender: String
#   amount0: String
#   amount1: String
#   logIndex: Int
#   # derived amount based on available prices of tokens
#   amountUSD: String

#   # optional fee fields, if a Transfer event is fired in _mintFee
#   feeTo: String
#   feeLiquidity: String
# }

# type Burn @entity {
#   # transaction hash + "-" + index in mints Transaction array
#   id: ID!
#   transaction: Transaction!
#   timestamp: DateTime! # need this to pull recent txns for specific token or pair
#   pair: Pair!

#   # populated from the primary Transfer event
#   liquidity: String!

#   # populated from the Burn event
#   sender: String
#   amount0: String
#   amount1: String
#   to: String
#   logIndex: Int
#   # derived amount based on available prices of tokens
#   amountUSD: String

#   # mark uncomplete in ETH case
#   needsComplete: Boolean!

#   # optional fee fields, if a Transfer event is fired in _mintFee
#   feeTo: String
#   feeLiquidity: String
# }

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: DateTime! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: String!
  from: String # the EOA that initiated the txn
  amount0In: Float!
  amount1In: Float!
  amount0Out: Float!
  amount1Out: Float!
  to: String!
  logIndex: Int

  # derived info
  amountUSD: Float!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: Float! # price of ETH usd
}
